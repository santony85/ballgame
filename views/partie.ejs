<!DOCTYPE html>
<html lang="en">

<head>
	<title>Bootstrap 4 Example</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
	<meta name="apple-mobile-web-app-capable" content="yes" />
	<meta name="full-screen" content="yes" />
	<meta name="screen-orientation" content="LANDSCAPE" />
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
	<link rel="stylesheet" href="/css/style.css">
	<script src="/socket.io/socket.io.js"></script>
</head>

<body>
    
	<div class="container">
		<table class="maintable">
			<tr>
				<td>
					<div id="j1">
						<div class="middle">
							<center>
							<div class="photo">
								<div class="photoframe">
									<div class="jplay" id="jt0">O</div>
								</div>
							</div>
					
							<div class="name">
								<center>
								<h1 class="namejoueur" id="namejoueur1">Joueur 1</h1>
								</center>
							</div>
							<p>
							  <img class="hiddenXX" id="progj0" src="/assets/l0.png" width="180" height="50">
							</p>
							<div class="score" id="scorej1">0</div>
							</center>
						</div>
				</div>
			</td>
				<td><div class="plateau" id="plateau"></div></td>
				<td><div id="j2">
					<div class="middle">
						<center>
						<div class="photo">
							<div class="photoframe">
								<div class="jplay" id="jt1">O</div>
							</div>
						</div>
				
						<div class="name">
							<center>
							<h1 class="namejoueur" id="namejoueur2">Joueur 2</h1>
							</center>
						</div>
						<p>
							<img class="hiddenXX" id="progj1" src="/assets/l0.png" width="180" height="50">
						  </p>
						<div class="score" id="scorej2">0</div>
						</center>
					</div>
				</div></td>
			</tr>
		</table>
		<div class="waitbox" id="waitbox">
			<center>
			   <div><h1 style="font-size: 7rem;">En attente</h1></div>
			   <div><h1 style="font-size: 7rem;">De joueur 2</h1></div>
			</center>
		</div>
		<div class="waitbox" id="winbox">
			<center>
			   <div><h1 style="font-size: 7rem;">THE WINNER IS !!!!</h1></div>
			   <div><h1 style="font-size: 7rem;" id="winname">JOUEUR 1</h1></div>
			</center>
		</div>
	</div>
	<script>
		
		
		var socket = io();
		var numjoueur = 0;
		var joueur = 0;
		var clickEnable=false;
		var scoreJoueur=[0,0];
		var coupsmax = 10;
		var nbcoups=0;
		
		
		
		
		var lstColor = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', 'none'];
		var rects = [];
		var pointTemp = [0, 0];
		

		var elem;
		var ctx;
		var plateausize = 12;
		var timeoutval = 10;
		


		var plateauw = 590;
		var sizecase;
		var plateau = new Array(plateausize);
		for (i = 0; i < plateausize; i++) plateau[i] = new Array(plateausize);
		var isStart = false;
		var tmout;
		var nbtimeoutsec = 0;
		var coups = 1;

		var pile=[];
		var score=0;
		var clickEnable=false;

		var scoreJoueur=[0,0];
		
		

		window.onload = function () {
			//plateauw = window.innerWidth - 10;
			sizecase = Math.floor(plateauw / plateausize);
			//document.addEventListener('contextmenu', event => event.preventDefault());
			//createPlateau();
		}
		
		$(document).ready(function () {
			$('#winbox').css('visibility', 'hidden');
			<% if(type=='N'){ %>
			socket.emit('init', '<%= idpartie %>');
		    joueur = 0;
			clickEnable=true;
			<%} else { %>
			socket.emit('join', '<%= idpartie %>');
			joueur = 1;
			<%}%>
		})
		
		
		var zzz = 0;		  
		socket.on('affgridg', function(msg) {
			//var sj1 = document.getElementById('jt0');
			//sj1.innerHTML=zzz++;
			plateau = msg.plateau;
			numjoueur = msg.numjoueur;
			scoreJoueur[0]=msg.sj0;
			scoreJoueur[1]=msg.sj1;
			if(numjoueur==joueur)clickEnable=true;
			else clickEnable=false;
			affPlateau(msg.X,msg.Y);
			affScore(msg.sj0,msg.sj1);
		  });
		
	    socket.on('startpartie', function(msg) {
			var sj1 = document.getElementById('namejoueur1');
			var sj2 = document.getElementById('namejoueur2');
			sj1.innerHTML=msg.joueur1;
			sj2.innerHTML=msg.joueur2;	
 	   	    $('#waitbox').css('visibility', 'hidden');
			if(joueur==0)startTimer();
		  });
		  
		socket.on('starttimerg', function(msg) {
			stopTimer();
			nbcoups=msg.nbcoups;
			console.log(nbcoups)
			numjoueur = msg.numjoueur;
			plateau = msg.plateau;
			var image = document.getElementById("progj0" );
			image.src = "/assets/l0.png"
			image = document.getElementById("progj1" );
			image.src = "/assets/l0.png"
			if(joueur==0)startTimer();
		  });
		  
		  
		socket.on('afftimerg', function(msg) {
			//console.log("msg")
			var image = document.getElementById("progj" + msg.numjoueur);
			image.src = "/assets/l" + msg.nbtimeoutsec + ".png"
			//
			plateau = msg.plateau;
			if(numjoueur==joueur)clickEnable=true;
			else clickEnable=false;
			
		  });  
		  
		socket.on('affplateau', function(msg) {
			plateau = msg.plateau;
			affPlateau(-1, -1);
		  });
		
		socket.on('stopgame', function(msg) {
			stopTimer();
			clickEnable=false;
			var sj1 = document.getElementById('winname');
			sj1.innerHTML=msg;
			$('#winbox').css('visibility', 'initial');
		  });
		  
		  
		function affScore(j0,j1){
		   var sj1 = document.getElementById('scorej1');
		   var sj2 = document.getElementById('scorej2');
		   sj1.innerHTML=j0;
		   sj2.innerHTML=j1;	
		}  

		function startTimer(){
			tmout = setInterval(function(){
				//console.log(numjoueur)
				
				if(nbtimeoutsec > 9){
				   nbtimeoutsec = 0;
				   stopTimer();

				   //var image = document.getElementById("progj" + numjoueur);
				   //image.src = "/assets/l" + nbtimeoutsec + ".png"
				   var data={id:'<%= idpartie %>',numjoueur:numjoueur,nbtimeoutsec:nbtimeoutsec,plateau:plateau};
				   socket.emit('afftimer', data);
				   //change joueur
				   if(numjoueur==0)numjoueur=1;
				   else numjoueur=0;
				   var data={id:'<%= idpartie %>',numjoueur:numjoueur,plateau:plateau,nbcoups:nbcoups,sj0:scoreJoueur[0],sj1:scoreJoueur[1]};
				   socket.emit('stoptimer', data);

				}
				else {
					nbtimeoutsec++;
					var data={id:'<%= idpartie %>',numjoueur:numjoueur,nbtimeoutsec:nbtimeoutsec,plateau:plateau};
					socket.emit('afftimer', data);	
				}
				
				
			}, 1000);
		}

		function stopTimer(){
			clearInterval(tmout);
			nbtimeoutsec=0;
		}
		
		//ok -a revoir
		function affPlateau(X, Y) {
			var sceneRoot = document.getElementById('plateau');
			sceneRoot.innerHTML = "";
			var size = Math.floor(plateauw / plateausize);
			var table = document.createElement('table');
			table.className = "gamegrid";
			table.id = "mytable";
			//
			for (var i = 0; i < plateausize; i++) {
				var rowEl = document.createElement('tr');
				for (var j = 0; j < plateausize; j++) {
					var vtp = plateau[i][j];
					//console.log(vtp);
					var cellEl = document.createElement('td');
					cellEl.width = size;
					cellEl.height = size;
					cellEl.align = "center";
					if (vtp !== 4) {
						var img = document.createElement('img');
						img.src = '/assets/' + vtp + '.png';
						img.height = size;
						img.width = size;
						img._row = j;
						img._column = i;
						img._color = vtp;
						cellEl.appendChild(img);
						//if(numjoueur == joueur){
						  img.onclick = function (event) {
							  this.onCellClick(event);
						  }.bind(this);
						//}	
					}
					if (X == j && Y == i) {
						var nba = 0;
						var msize = Math.floor(size / 10);
						var img = document.createElement('img');
						img.height = size;
						img.width = size;
						cellEl.appendChild(img);
						var interval = setInterval(function () {
							var img = document.createElement('img');
							img.src = '/assets/4.png';
							img.height = size - (msize * nba);
							img.width = size - (msize * nba);
							table.rows[Y].cells[X].innerHTML = "";
							nba++;
							if (nba == 10) {
								clearInterval(interval);
								//callback(env);
							}
						}, 5)
					}
					rowEl.appendChild(cellEl);
				}
				table.appendChild(rowEl);
			}
			sceneRoot.appendChild(table);
		}
		

		this.onCellClick = function (event) {
		  if(clickEnable){
			pile=[];
			clickEnable=false;
			score=0;
			var sourceElmt = event.srcElement;
			var cell = null;
			if (sourceElmt.tagName === 'IMG') {
				cell = sourceElmt.parentNode;
			} else {
				cell = sourceElmt;
			}
			var tmpcol = sourceElmt._color;
			var env = this;
			this.AiGame(
				sourceElmt._row,
				sourceElmt._column,
				tmpcol,
				this,function(ret){
					stopTimer();
					var data={id:'<%= idpartie %>',numjoueur:numjoueur,plateau:plateau,nbcoups:nbcoups,sj0:scoreJoueur[0],sj1:scoreJoueur[1]};
					socket.emit('stoptimer', data);
				})
			
			}
		}
		//get Color Cell
		this.getCell= function (X,Y){
			return plateau[Y][X];
		} 
		//get valid X Y
		this.getValidXY= function (X,Y){
			return X>=0 && Y>=0 && X < plateausize && Y < plateausize;
		} 
		//check equal color from original to next
		this.checkCell = function (X, Y, COL){
			var colorActuel = COL;
			var cellColor = this.getCell(X,Y)
			return colorActuel == cellColor;
		}
		
		this.checkRight = function (X, Y, COL){
			var colorActuel = COL;
			if(this.getValidXY(X+1,Y)){
				var cellColor = this.getCell(X+1,Y)
				return colorActuel == cellColor;
			}
			else return false;
		}
		this.checkLeft = function (X, Y, COL){
			var colorActuel = COL;
			if(this.getValidXY(X-1,Y)){
				var cellColor = this.getCell(X-1,Y)
				return colorActuel == cellColor;
			}
			else return false;
		}
		this.checkTop = function (X, Y, COL){
			var colorActuel = COL;
			if(this.getValidXY(X,Y-1)){
				var cellColor = this.getCell(X,Y-1)
				return colorActuel == cellColor;
			}
			else return false;
		}
		this.checkBottom = function (X, Y, COL){
			var colorActuel = COL;
			if(this.getValidXY(X,Y+1)){
				var cellColor = this.getCell(X,Y+1)
				return colorActuel == cellColor;
			}
			else return false;
		}
		
		this.AiGame = function (X, Y, COL, env, callback) {

			var isRight=false;
			var isTop=false;
			var isLeft=false;
			var isBottom=false;

			if(env.checkCell(X,Y,COL)){
				plateau[Y][X] = 4;
				//env.affPlateau(X , Y, env, function (env) {});
				affPlateau(X , Y);
				//var data={id:'<%= idpartie %>',plateau:plateau,X:X,Y:Y,numjoueur:numjoueur};
				//socket.emit('affplateau', data);
				score++;
			  }

			//check right
			if(env.checkRight(X,Y,COL)){
				//console.log("right")  
				isRight=true;
			}
			if(env.checkTop(X,Y,COL)){
				//console.log("top")  
				isTop=true;
				var obj={X:X,Y:Y-1}
				pile.push(obj)
			}
			if(env.checkLeft(X,Y,COL)){
				//console.log("left")  
				isLeft=true;
				var obj={X:X-1,Y:Y}
				pile.push(obj)
			}
			if(env.checkBottom(X,Y,COL)){
				//console.log("bottom")  
				isBottom=true;
				var obj={X:X,Y:Y+1}
				pile.push(obj)
			}

			if(isRight){
				env.AiGame(X+1, Y, COL, env,callback);  
			}
			else {
				var melm = pile.pop();
				if(melm)env.AiGame(melm.X, melm.Y, COL, env,callback); 
				else {
					scoreJoueur[joueur]=scoreJoueur[joueur]+score;
					clickEnable=false;
					if(numjoueur==0)numjoueur=1;
					else numjoueur=0; 
					var data={id:'<%= idpartie %>',plateau:plateau,X:X,Y:Y,numjoueur:numjoueur,sj0:scoreJoueur[0],sj1:scoreJoueur[1],nbcoups:nbcoups};
					socket.emit('affgrid', data);
					return callback("ok"); 
				}
			}
		}


	</script>
</body>

</html>